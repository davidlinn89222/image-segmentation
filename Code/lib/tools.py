# Import required moduleimport numpy as npfrom sklearn.neighbors import NearestNeighborsfrom sklearn.cluster import SpectralClusteringimport matplotlib.pyplot as pltimport cv2from skimage import segmentation, colorfrom time import timedef optimal_eps_DBSCAN(X, K):    """        Parameters    ----------    X : [numpy array]    Returns    -------    Visualization to determine the eps    """    neigh = NearestNeighbors(n_neighbors = K)    nbrs = neigh.fit(X)    distances, indices = nbrs.kneighbors(X)    distances = np.sort(distances, axis=0)    distances = distances.sum(axis = 1)    plt.plot(distances)    def recreate_image(codebook, labels, w, h):    """    Recreate image via color quantization     Parameters    ----------    codebook : [numpy array]        center of clusters from algorithms    labels : [numpy array]        predicted label from algorithms    w : [integer]        dimension of rows    h : [integer]        dimension of columns     Returns    -------    image : [numpy array]    """    d = codebook.shape[1]    image = np.zeros((w, h, d))    label_idx = 0    for i in range(w):        for j in range(h):            image[i][j] = codebook[labels[label_idx]]            label_idx += 1    return imagedef Spectral_Clustering(filepath, w, h, n_colors, kernel):        # Load the photo and convert from BGR to GRAY model     img = cv2.imread(filepath)    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)        # Specify the dimensions of the image    w, h = tuple(img.shape)        # Compress the pixel value within [0, 1]    img = np.array(img, dtype = np.int32) / 255        # Resize the photo with 150x150    dim = w, h    img = cv2.resize(img, dim, interpolation = cv2.INTER_AREA)        # Reshape it to 1-d array     img_arr = np.reshape(img, (dim[0]*dim[1], 1))        # Store the proccessed photo    fig, ax = plt.subplots(1, 1, figsize = (10, 10), subplot_kw = dict(xticks=[], yticks=[]))    ax.imshow(img, cmap = "gray")    fig.savefig('./Cluster_results/MRI_multi/' + "original" + filename[0] + ".png", dpi = 400)        # Fitting spectral clustering    t0 = time()    spec = SpectralClustering(n_clusters = n_colors, assign_labels = "kmeans", verbose= True).fit(img_arr)    print("Spectral clustering done in %0.3fs." % (time() - t0))    out = color.label2rgb(np.reshape(spec.labels_, (dim[1], dim[0])), img, kind='avg')    return out