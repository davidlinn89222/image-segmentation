import numpy as npimport randomimport pandas as pddef Exponential_generator(n, lam = 1):    """    Generate Exponential random variabe with lambda = 1    Parameters    ----------    n : [integer] sample size.    lam : [integer] parameter for exponential distribution    Returns    -------    [np.array] the realizations of exponential random variable    """    U = np.random.uniform(0, 1, n)    return(-1/lam*np.log(1-U))    def std_norm_AccRej_generator(n):    """    Generate standard normal distribution random variable     Parameters    ----------    n : [integer] sample size    Returns    -------    [np.array] the realizations of standard normal random variable     """        # Section 1: simulate Exp(1) data    y = Exponential_generator(n, lam = 1)        # Section 2: simulate U1 and set a condition used to generate abs_X    U1 = np.random.uniform(0, 1, n)    condi = ( U1 <= np.exp(-(y-1)**2/2) )    abs_X = y[condi]        # Section 3: simulate U2 and set a condition used to generate X    U2 = np.random.uniform(0, 1, len(abs_X))    condi = (U2 <= 0.5)    return(np.where(condi, abs_X, -abs_X))def std_norm_BM_generator(n):    """    Generate standard normal distribution random variable via     Box-Muller approach.    Parameters    ----------    n : [integer] sample size    Returns    -------    [np.array] the realizations of standard normal random variable     """    U1 = np.random.uniform(0, 1, n)    U2 = np.random.uniform(0, 1, n)    return(np.sqrt(-2*np.log(U1))*np.cos(2*np.pi*U2))    def bivariate_norm_generator(n, mu, Sigma):    """    Generate multivariate normal distribution based on mu and Sigma paras    Parameters    ----------    n : [integer] sample size    mu : [np.array] mean vector (px1)    Sigma : [np.array] covariance matrix (pxp)    Returns    -------    [np.array] the realizations of multivariate normal random varables    """        # Define dimensions    d = len(mu)        # Compute the Cholesky Decomposition with small perburbations    epsilon = 0.0001    Sigma_per = Sigma + epsilon*np.identity(d)    L = np.linalg.cholesky(Sigma_per)        # Simulate d-dims indep normal random variables: X    X = np.empty(shape = (0, n))    for i in range(2):        X = np.append(X, std_norm_BM_generator(n).reshape((1, -1)), axis=0)            # Transformation     y = mu + np.dot(L, X)    return(y.T)    def clusters_norm_generator(n_sample_size, n_clusters, mu, Sigma, seed):    """    Generate cluster data based on normal distributions    Parameters    ----------    n_sample_size : integer        sample size            n_clusters : integer        number of clusters            mu : [np.array]        mean vector parameter in normal distribution            Sigma : [np.array]        covariance matrix parameter in normal distribution            seed : integer        used to control randomness    Returns    -------    [pd DataFrame] Cluster data     """        # Error handlings    if len(mu) != len(Sigma):        raise Exception("The length of mu and of Sigma are not the same ({}!={}).".format(len(mu), len(Sigma)))    elif len(mu) != n_clusters:        raise Exception("The number of distribution is not the same as n_clusters ({}!={}).").format(len(mu), n_clusters)        # Contronl the randomness    random.seed(seed)        # Generate clusters    frames = [        pd.DataFrame(clust, columns = ["x1", "x2"]) for clust in [            bivariate_norm_generator(n_sample_size, mu[i], Sigma[i]) for i in range(n_clusters)        ]    ]    df = pd.concat(frames)    df["Clust"] = np.repeat(["Cluster" + str(i+1) for i in range(n_clusters)], n_sample_size)        return(df)def clusters_uninorm_generator(n_sample_size, n_clusters_uni, n_clusters_norm, mu, Sigma, a, b, seed):        # Control the randomness    random.seed(seed)        # Generate uniform clusters    frames1 = [        pd.DataFrame(clust, columns = ["x1", "x2"]) for clust in [            np.random.uniform(a[i], b[i], size = (n_sample_size, 2)) for i in range(n_clusters_uni)        ]    ]        # Generate normal clusters    frames2 = [        pd.DataFrame(clust, columns = ["x1", "x2"]) for clust in [            bivariate_norm_generator(n_sample_size, mu[i], Sigma[i]) for i in range(n_clusters_norm)        ]    ]        # Append frames2 to frames1    frames1.extend(frames2)    df = pd.concat(frames1)    df["Clust"] = np.repeat(["Cluster" + str(i+1) for i in range(n_clusters_uni+n_clusters_norm)], n_sample_size)    return(df)