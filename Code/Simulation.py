from lib import generatorsimport numpy as npimport matplotlib.pyplot as pltimport seaborn as sns; sns.set(style="whitegrid")import pandas as pdimport copyimport randomfrom sklearn.cluster import KMeansfrom sklearn.mixture import GaussianMixture# ===============================================================================================### Scenario 1: Simulate three clusters, each of them are 2-d independent bivariate normal distribution# number of clustersnum_clusters = 3# sample sizen = 1000# Specify three mean vectors for these clustersmu1 = np.array([1, 2]).reshape(2, 1)mu2 = np.array([15, 5]).reshape(2, 1)mu3 = np.array([5, 15]).reshape(2, 1)mu = [mu1, mu2, mu3]# Specify covariance matrix for these clustersSigma1 = np.array([[2, 0], [0, 2]])Sigma2 = np.array([[4, 0], [0, 6]])Sigma3 = np.array([[3, 0], [0, 3]])Sigma = [Sigma1, Sigma2, Sigma3]# Generate cluster data df = generators.clusters_norm_generator(n, num_clusters, mu, Sigma, 123)# Visualization for the clusterssns.jointplot(data = df, x = "x1", y = "x2", hue = "Clust")# ------------------------------------------------------------------------------------------------# Modeling using Kmeans and GMM# Initialize KMeans and GaussianMixture modelskmeans = KMeans(n_clusters = 3, max_iter = 10**4, tol = 1e-6)gm = GaussianMixture(n_components = 3, max_iter = 100000, tol = 1e-6, init_params='random')# Fit and predict the algorithmsy_kmeans = kmeans.fit_predict(df.drop("Clust", axis = 1))y_gm = gm.fit_predict(df.drop("Clust", axis = 1))# New dfdf_preds = df.copy()df_preds["preds_Kmeans"] = y_kmeansdf_preds["preds_GMM"] = y_gm# Visualize the prediction resultsns.jointplot(data = df_preds, x = "x1", y = "x2", hue = "preds_Kmeans", palette = "deep")sns.jointplot(data = df_preds, x = "x1", y = "x2", hue = "preds_GMM", palette = "deep")# ===============================================================================================### Scenario 2: Simulate three clusters, each of them are 2-d bivariate normal distribution# number of clustersnum_clusters = 3# sample sizen = 1000# Specify three mean vectors for these clustersmu1 = np.array([1, 2]).reshape(2, 1)mu2 = np.array([20, 20]).reshape(2, 1)mu3 = np.array([10, 20]).reshape(2, 1)mu = [mu1, mu2, mu3]# Specify covariance matrix for these clustersSigma1 = np.array([[6, 6], [6, 8]])Sigma2 = np.array([[6, 6], [6, 8]])Sigma3 = np.array([[6, 6], [6, 8]])Sigma = [Sigma1, Sigma2, Sigma3]# Generate cluster data df2 = generators.clusters_norm_generator(n, num_clusters, mu, Sigma, 123)# Visualization for the clusterssns.jointplot(data = df2, x = "x1", y = "x2", hue = "Clust")# -----------------------------------------------------------------------------------------------# Modeling using Kmeans and GMM# Initialize KMeans and GaussianMixture modelskmeans = KMeans(n_clusters = 3, max_iter = 10**4, tol = 1e-6)gm = GaussianMixture(n_components = 3, max_iter = 100000, tol = 1e-6, init_params='random')# Fit and predict the algorithmsy_kmeans = kmeans.fit_predict(df2.drop("Clust", axis = 1))y_gm = gm.fit_predict(df2.drop("Clust", axis = 1))# New dfdf2_preds = df2.copy()df2_preds["preds_Kmeans"] = y_kmeansdf2_preds["preds_GMM"] = y_gm# Visualize the prediction resultsns.jointplot(data = df2_preds, x = "x1", y = "x2", hue = "preds_Kmeans", palette = "deep")sns.jointplot(data = df2_preds, x = "x1", y = "x2", hue = "preds_GMM", palette = "deep")# ===============================================================================================### Scenario 3: Simulate three clusters, each of them are 2-d uniform distribution# number of clustersnum_clusters = 2# sample sizen = 1000# Specify the a parametersa = [[0, 0], [1, 1]]b = [[2, 2], [3, 3]]# Generate cluster datadf3 = generators.clusters_uniform_generator(n, 2, a, b, 123)# Visualization for the clusterssns.jointplot(data = df3, x = "x1", y = "x2", hue = "Clust")# -----------------------------------------------------------------------------------------------# Modeling using Kmeans and GMM# Initialize KMeans and GaussianMixture modelskmeans = KMeans(n_clusters = 2, max_iter = 10**4, tol = 1e-6)gm = GaussianMixture(n_components = 2, max_iter = 100000, tol = 1e-6, init_params='random')# Fit and predict the algorithmsy_kmeans = kmeans.fit_predict(df3.drop("Clust", axis = 1))y_gm = gm.fit_predict(df3.drop("Clust", axis = 1))# New dfdf3_preds = df3.copy()df3_preds["preds_Kmeans"] = y_kmeansdf3_preds["preds_GMM"] = y_gm# Visualize the prediction resultsns.jointplot(data = df3_preds, x = "x1", y = "x2", hue = "preds_Kmeans", palette = "deep")sns.jointplot(data = df3_preds, x = "x1", y = "x2", hue = "preds_GMM", palette = "deep")