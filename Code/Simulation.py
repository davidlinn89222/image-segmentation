import os# Change the current sys pathos.chdir("/Users/davidlin/Desktop/School/Master/2021_secondSem/SC/image-segmentation/")from Code.lib import generatorsimport numpy as npimport matplotlib.pyplot as pltimport seaborn as sns; sns.set_style("white")import pandas as pdfrom hmmlearn import hmmfrom sklearn.cluster import KMeans, SpectralClusteringfrom sklearn.datasets import make_circlesfrom sklearn import metrics# ===============================================================================================### Scenario 1: Simulate three clusters, each of them is 2-d independent bivariate normal distribution# number of clustersnum_clusters = 3# sample sizen = 1000# Specify three mean vectors for these clustersmu1 = np.array([1, 2]).reshape(2, 1)mu2 = np.array([18, 5]).reshape(2, 1)mu3 = np.array([5, 15]).reshape(2, 1)mu = [mu1, mu2, mu3]# Specify three covariance matrix for these clustersSigma1 = np.array([[2, 0], [0, 2]])Sigma2 = np.array([[2, 0], [0, 1]])Sigma3 = np.array([[5, 0], [0, 4]])Sigma = [Sigma1, Sigma2, Sigma3]# Generate cluster data df = generators.clusters_norm_generator(n, num_clusters, mu, Sigma, seed = 123)# Visualization for the clustersp = sns.jointplot(data = df, x = "x1", y = "x2", hue = "Clust", palette = "deep")p.savefig("./Simu_results/sen1.png", dpi=400)# Modeling using Kmeans, Spectral Clustering and HMM# Initialize KMeans, Spectral Clustering and HMM# Kmeans Clustering kmeans = KMeans(n_clusters = 3, max_iter = 100000, tol = 1e-6).fit(df.drop("Clust", axis = 1))# Spectral Clusteringspec = SpectralClustering(n_clusters = 3, affinity = 'nearest_neighbors', assign_labels = "kmeans").fit(df.drop("Clust", axis = 1))# HMMhm = hmm.GaussianHMM(n_components = 3,  covariance_type = "full").fit(df.drop("Clust", axis = 1))hm_labels = hm.predict(df.drop("Clust", axis = 1))# New dfdf_preds = df.copy()df_preds["preds_Kmeans"] = kmeans.labels_df_preds["preds_Spectral"] = spec.labels_df_preds['preds_HMM'] = hm_labels# Vislabels = ["preds_Kmeans", "preds_Spectral", "preds_HMM"]texts_md = ["Kmeans", "Spectral", "HMM"]fig, axes = plt.subplots(1, 3, figsize=(12, 5))for i in range(3):    temp = sns.scatterplot(ax=axes[i], data = df_preds, x = "x1", y = "x2", hue = labels[i], palette = "deep")    temp.get_legend().remove()     temp.set_title("Cluster result from " + texts_md[i])    temp.set(xticklabels=[])     temp.set(yticklabels=[])    temp.set(xlabel=None)    temp.set(ylabel=None)fig.savefig("./Simu_results/sen1_clust.png", dpi=400)# ===============================================================================================### Scenario 2: Simulate three clusters, each of them is 2-d non-indep bivariate normal distribution# number of clustersnum_clusters = 3# sample sizen = 1000# Specify three mean vectors for these clustersmu1 = np.array([5, 6]).reshape(2, 1)mu2 = np.array([20, 20]).reshape(2, 1)mu3 = np.array([10, 20]).reshape(2, 1)mu = [mu1, mu2, mu3]# Specify covariance matrix for these clustersSigma1 = np.array([[6, 6], [6, 8]])Sigma2 = np.array([[6, 6], [6, 8]])Sigma3 = np.array([[6, 6], [6, 8]])Sigma = [Sigma1, Sigma2, Sigma3]# Generate cluster data df2 = generators.clusters_norm_generator(n, num_clusters, mu, Sigma, seed = 123)# Visualization for the clustersp = sns.jointplot(data = df2, x = "x1", y = "x2", hue = "Clust", palette = "deep")p.savefig("./Simu_results/sen2.png", dpi=400)# Modeling using Kmeans and GMM# Initialize KMeans and GaussianMixture models# Kmeans Clustering kmeans = KMeans(n_clusters = 3, max_iter = 100000, tol = 1e-6).fit(df2.drop("Clust", axis = 1))# Spectral Clusteringspec = SpectralClustering(n_clusters = 3, affinity = 'nearest_neighbors', assign_labels = "kmeans").fit(df2.drop("Clust", axis = 1))# HMMhm = hmm.GaussianHMM(n_components = 3,  covariance_type = "full").fit(df2.drop("Clust", axis = 1))hm_labels = hm.predict(df2.drop("Clust", axis = 1))# New dfdf2_preds = df2.copy()df2_preds["preds_Kmeans"] = kmeans.labels_df2_preds["preds_Spectral"] = spec.labels_df2_preds['preds_HMM'] = hm_labels# Visfig, axes = plt.subplots(1, 3, figsize=(12, 5))for i in range(3):    temp = sns.scatterplot(ax=axes[i], data = df2_preds, x = "x1", y = "x2", hue = labels[i], palette = "deep")    temp.get_legend().remove()     temp.set_title("Cluster result from " + texts_md[i])    temp.set(xticklabels=[])     temp.set(yticklabels=[])    temp.set(xlabel=None)    temp.set(ylabel=None)fig.savefig("./Simu_results/sen2_clust.png", dpi=400)# ===============================================================================================### Scenario 3: moons structure data with noise from make_moons() in sklearn module# sample sizen = 1000# Simulate data from make_noon with noise = 0.08 varX, y = make_circles(n_samples = n, noise = .06, factor=0.4)df3 = pd.DataFrame(X, columns = ["x1", "x2"])df3['Clust'] = y# Visualization for the clustersp = sns.jointplot(data = df3, x = "x1", y = "x2", hue = "Clust", palette = "deep")p.savefig("./Simu_results/sen3.png", dpi=400)# Modeling using Kmeans and GMM# Initialize KMeans and GaussianMixture models# Kmeans Clustering kmeans = KMeans(n_clusters = 2, max_iter = 100000, tol = 1e-6).fit(df3.drop("Clust", axis = 1))# Spectral Clusteringspec = SpectralClustering(n_clusters = 2, affinity = 'nearest_neighbors', assign_labels = "kmeans").fit(df3.drop("Clust", axis = 1))# HMMhm = hmm.GaussianHMM(n_components = 2,  covariance_type = "full").fit(df3.drop("Clust", axis = 1))hm_labels = hm.predict(df3.drop("Clust", axis = 1))# New dfdf3_preds = df3.copy()df3_preds["preds_Kmeans"] = kmeans.labels_df3_preds["preds_Spectral"] = spec.labels_df3_preds['preds_HMM'] = hm_labels# Visfig, axes = plt.subplots(1, 3, figsize=(12, 5))for i in range(3):    temp = sns.scatterplot(ax=axes[i], data = df3_preds, x = "x1", y = "x2", hue = labels[i], palette = "deep")    temp.get_legend().remove()     temp.set_title("Cluster result from " + texts_md[i])    temp.set(xticklabels=[])     temp.set(yticklabels=[])    temp.set(xlabel=None)    temp.set(ylabel=None)fig.savefig("./Simu_results/sen3_clust.png", dpi=400)# -----------------------------------------------------------------------------------------------------------------------------# Performance of simulation results        # Rand index# Rand index is a function that measures the similarity of the two assignments, ignoring permutations:with open("./Simu_results/rand_score.txt", "w") as f:    i = 1    for dt in sim_list:        j = 1        for md in labels[1:]:            rand_sc = round(metrics.rand_score(dt["Clust"], dt[md]), 4)            print("The rand score for {} in scenario {} is {}".format(texts_md[j], i, rand_sc), file=f)            j+=1        i+=1